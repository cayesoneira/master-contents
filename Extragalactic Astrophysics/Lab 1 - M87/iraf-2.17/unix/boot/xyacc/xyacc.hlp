.help xyacc Jan11 softools
.ih
NAME
xyacc -- SPP modified yacc compiler compiler
.ih
USAGE
xyacc [ options ] " file"
.ih
OPTIONS
.ls 10 -b \fIfile_prefix\fR
Specify a file_prefix for output files
.le
.ls 10 -d
Also produce a header file \fBy.tab.h\fR.
.le
.ls 10 -l
Don't generate '#line' directives
.le
.ls 10 -p \fIsym_prefix\fR
Prepend sym_prefix to the external symbols
.le
.ls 10 -P \fIparser\fR
Specify parser file (default \fBboot$xyacc/yaccpar.x\fR)
.le
.ls 10 -Q\fI(y/n)\fR
Flag for version stamping. The \fB-Qy\fR option puts the version
stamping information in \fBy.tab.c\fR. This allows you to know what
version of yacc built the file. The \fB-Qn\fR option (the default)
writes no version information.
.le
.ls 10 -t
Compiles runtime debugging code by default.
.le
.ls 10 -v
Prepares the file \fBy.output\fR, which contains a description of the
parsing tables and a report on conflicts generated by ambiguities in
the grammar.
.le
.ls 10 -V
Output version information and exit
.le
.ls 10 -Y \fIdir\fR
Specify location of \fByaccpar.x\fR (default \fBboot$xyacc\fR).
.le
.ih
DESCRIPTION
This is a version of yacc that has been modified to produce SPP
language parsers.  For the most part, it should follow the operation
of standard yacc, with the differences noted below.  This version of
XYACC is based on code obtained from the OpenSolaris project. See the
man page for yacc for options.
.sp
This is a version of yacc that has been modified to produce SPP
language parsers.  For the most part, it should follow the operation
of standard yacc, with the differences noted below.
.sp
Input files should follow the yacc convention of ending in \fB.y\fR.
.ih
DIFFERENCES
\fB(1)\fR
The Yacc input syntax is unmodified, except that the comment
convention is now as in SPP, rather than C (i.e., use #, rather than
/*..*/).  All defines, actions, etc. are of course given in the SPP
language.

\fB(2)\fR 
The Yacc output file is "ytab.x", rather than "y.tab.c".  The token
defs file "y.tab.h" now contains SPP defines, rather than C #defines.
The states file "y.output" is completely unmodified.

\fB(3)\fR 
The global declarations section %{ .. %} had to be changed somewhat
because SPP does not have global variables.  The section is now
divided into two subsections.  The first is for global defines,
includes, etc. which go into the header area of the ytab.x file.  Then
follows a %L, telling Yacc that the local declarations for the parser
procedure follow.  This second section should contain variable and
function declarations required for the user supplied actions (code
fragments to be executed when a rule of the grammar is recognized) in
the yyparse procedure.

\fB(4)\fR 
The global declarations section MUST contain the following two
defines:

.ls
YYMAXDEPTH
Depth of the parser stacks; determines the maximum complexity of a
language construct which can be parsed.  A typical value is 150.
.le
.ls
YYOPLEN
The length, in struct units, of a token operand value structure.  You
define the operand structure to be whatever you wish; all the parser
needs to know is how big an element is.  The lexical analyzer and the
actions, both of which are supplied by the user, use the operand
structure for communications.  Operand structures are always referred
to by a Mem pointer.
.le
.ih
SEE ALSO
xpp, rpp, generic, mkpkg
